name: Deploy Laravel to EC2

on:
  push:
    branches:
      - main  # replace with your branch name

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Whitelist GitHub Actions IP
        uses: bbharathkumarreddy/aws-whitelist-ip@v1.0
        with:
          security-group-id: sg-0bf39fb30181489f6
          action: whitelist
          port: 22
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Prepare deployment directory
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Change ownership to ubuntu:www-data for write permissions
            sudo chown -R ubuntu:www-data ${{ secrets.DEPLOY_PATH }}

      - name: Copy project files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "."
          target: ${{ secrets.DEPLOY_PATH }}
          overwrite: true
          rm: false
          strip_components: 0
          exclude: |
            .git
            .gitattributes
            README.md
            .env.example
            .DS_Store
            Thumbs.db

      - name: Set proper file ownership
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Change ownership to www-data:www-data after copying files
            sudo chown -R www-data:www-data ${{ secrets.DEPLOY_PATH }}

      - name: SSH - Install & Setup Laravel
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}
            
            # Keep ubuntu ownership for all operations first
            sudo chown -R ubuntu:ubuntu .
            
            # Install dependencies first
            composer install --no-interaction --prefer-dist --optimize-autoloader
            
            # Create necessary Laravel directories if they don't exist
            mkdir -p storage/app/public
            mkdir -p storage/framework/cache
            mkdir -p storage/framework/sessions
            mkdir -p storage/framework/views
            mkdir -p storage/logs
            mkdir -p bootstrap/cache
            
            # Create storage link and ensure directories exist
            php artisan storage:link
            
            # Clear and cache Laravel configurations
            php artisan config:clear
            php artisan cache:clear
            php artisan view:clear
            php artisan route:clear
            
            # Run Laravel commands
            # Check if migrations need to be run (safer approach)
            php artisan migrate:status
            php artisan migrate --no-interaction
            
            # Cache and optimize Laravel
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan optimize
            
            # Build frontend assets
            npm install
            npm run build
            
            # Ensure Composer autoloader is generated before changing ownership
            composer dump-autoload --optimize
            
            # Set comprehensive Laravel file permissions after all operations
            # Storage directory - needs write access for logs, cache, sessions
            sudo chown -R www-data:www-data storage
            sudo chmod -R 775 storage
            
            # Bootstrap cache directory - needs write access for compiled views
            sudo chown -R www-data:www-data bootstrap/cache
            sudo chmod -R 775 bootstrap/cache
            
            # Public directory - web accessible
            sudo chown -R www-data:www-data public
            sudo chmod -R 755 public
            
            # Ensure public/storage exists and has proper permissions
            sudo chown -R www-data:www-data public/storage
            sudo chmod -R 755 public/storage
            
            # Set permissions for .env file (readable by web server)
            sudo chown www-data:www-data .env
            sudo chmod 644 .env
            
            # Set permissions for vendor directory (readable by web server)
            # Ensure vendor directory exists and has proper permissions
            sudo chown -R www-data:www-data vendor
            sudo chmod -R 755 vendor
            
            # Final verification - ensure no Composer processes are running
            pkill -f composer || true
            
            # Start queue worker in background
            nohup php artisan queue:work --daemon > /dev/null 2>&1 &

      - name: Remove GitHub Actions IP
        uses: bbharathkumarreddy/aws-whitelist-ip@v1.0
        with:
          security-group-id: sg-0bf39fb30181489f6
          action: remove
          port: 22
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

